# .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: 'App Release ${{ github.ref_name }}'
          draft: false
          prerelease: false

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - platform: ubuntu-latest
            os: linux # 用于 Android 构建
          - platform: macos-latest
            os: macos
          - platform: windows-latest
            os: windows

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux (Android build) system dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev

      # =====================================================
      # ANDROID-SPECIFIC SETUP (runs only on ubuntu-latest)
      # =====================================================
      - name: Set up Java
        if: matrix.os == 'linux'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.os == 'linux'
        uses: android-actions/setup-android@v3

      - name: Install NDK and other components with sdkmanager
        if: matrix.os == 'linux'
        run: |
          echo "y" | sdkmanager "ndk;25.2.9519653" "build-tools;34.0.0" "platforms;android-34"
      
      - name: Set NDK_HOME environment variable
        if: matrix.os == 'linux'
        run: echo "NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Decode and place Android signing key
        if: matrix.os == 'linux'
        run: |
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > ${{ runner.temp }}/release.keystore

      # =====================================================
      # COMMON SETUP for Rust, Node, and Frontend
      # =====================================================
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Rust target for Android
        if: matrix.os == 'linux'
        run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Configure Cargo for Android cross-compilation
        if: matrix.os == 'linux'
        run: |
          mkdir -p src-tauri/.cargo
          cat <<EOF > src-tauri/.cargo/config.toml
          [target.aarch64-linux-android]
          linker = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
          ar = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"
          
          [target.armv7-linux-androideabi]
          linker = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"
          ar = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar"

          [target.i686-linux-android]
          linker = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android24-clang"
          ar = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android-ar"

          [target.x86_64-linux-android]
          linker = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android24-clang"
          ar = "${ANDROID_HOME}/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android-ar"
          EOF

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install

      # =====================================================
      # BUILD STEP
      # =====================================================
      - name: Build desktop app
        if: matrix.os == 'macos' || matrix.os == 'windows'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

      - name: Build Android app
        if: matrix.os == 'linux'
        run: pnpm tauri android build
        env:
          TAURI_KEY_PATH: ${{ runner.temp }}/release.keystore
          TAURI_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}

      - name: Upload Android APK
        if: matrix.os == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: src-tauri/gen/android/app/build/outputs/apk/release/app-release.apk
          asset_name: app-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Android AAB
        if: matrix.os == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: src-tauri/gen/android/app/build/outputs/bundle/release/app-release.aab
          asset_name: app-${{ github.ref_name }}.aab
          asset_content_type: application/octet-stream
